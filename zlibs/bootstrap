#!/usr/bin/env zsh
# shellcheck shell=bash
# Copyright (c) 2016-2021 Ivan J. <parazyd@dyne.org>
# This file is part of libalpinesdk
#
# This source code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this source code. If not, see <http://www.gnu.org/licenses/>.

vars+=(bootstrap_cpio_stage3 bootstrap_cpio_stage4 CPIO_STAGE4)

bootstrap_complete_base()
{
	fn bootstrap_complete_base "$*"
	req=(R os arch version minversion strapdir LIBPATH)
	req+=(release mirror rootfs_mirror)
	ckreq || return 1

	notice "Bootstrapping: ${os}:${arch} base"

	export LANG=C
	export LC_ALL=C
	export SOURCE_DATE_EPOCH=1610550434

	bootstrap_cpio_stage3="$R/tmp/bootstrap-${os}-${arch}-stage3.cpio.gz"
	bootstrap_cpio_stage4="$R/tmp/bootstrap-${os}-${arch}-stage4.cpio.gz"

	if [[ -n "$CPIO_STAGE4" && -f "$bootstrap_cpio_stage4" ]]; then
		act "Using the existing stage4 bootstrap cpio archive..."
		bootstrap_cpio_unpack "$bootstrap_cpio_stage4" "$strapdir" || {
			die "Failed to extract cpio archive"
			return 1
		}
		bootstrap_stage4
		return
	elif [[ -f "$bootstrap_cpio_stage3" ]]; then
		act "Using the existing stage3 bootstrap cpio archive..."
		bootstrap_cpio_unpack "$bootstrap_cpio_stage3" "$strapdir" || {
			die "Failed to extract cpio archive"
			return 1
		}
		bootstrap_stage4 || { zerr; return 1; }
		if [[ -n "$CPIO_STAGE4" ]]; then
			bootstrap_cpio_pack "$bootstrap_cpio_stage4" || { zerr; return 1; }
		fi
		return
	fi

	notice "Downloading Alpine minirootfs"

	r="$rootfs_mirror/$os/v${version}/releases/$arch/alpine-minirootfs-${minversion}-${arch}.tar/gz"

	mkdir -p "$strapdir"
	pushd "$workdir"
		wget -c "$r" || { zerr; return 1; }
	popd

	notice "Extracting rootfs"
	pushd "$strapdir"
		sudo tar xf "../$(basename "$r")" --xattrs || { zerr; return 1; }
	popd

	# TODO: Support other arches like mips64 and ppc64le
	if [[ "$arch" =~ "^arm.." ]] || [[ "$arch" = "aarch64" ]];  then
		qemu_install_user "$strapdir" || { zerr; return 1; }
	fi

	# TODO: sys config as function
	conf_print_fstab       | sudo tee "$strapdir/etc/fstab" >/dev/null
	conf_print_hostname    | sudo tee "$strapdir/etc/hostname" >/dev/null
	conf_print_hosts       | sudo tee "$strapdir/etc/hosts" >/dev/null
	conf_print_netifaces   | sudo tee "$strapdir/etc/network/interfaces" >/dev/null
	conf_print_resolvconf  | sudo tee "$strapdir/etc/resolv.conf" >/dev/null
	conf_print_sourceslist | sudo tee "$strapdir/etc/apk/repositories" >/dev/null

	blend_bootstrap_setup || { zerr; return 1; }

	bootstrap_stage4 || { zerr; return 1; }
	bootstrap_cpio_pack "$bootstrap_cpio_stage3" || { zerr; return 1; }

	bootstrap_stage4 || { zerr; return 1; }
	if [[ -n "$CPIO_STAGE4" ]]; then
		bootstrap_cpio_pack "$bootstrap_cpio_stage4" || { zerr; return 1; }
	fi

	return
}

bootstrap_stage3()
{
	fn bootstrap_stage3
	req=(core_packages base_packages rootcredentials)
	ckreq || return 1

	cat <<EOF | sudo tee "$strapdir/thirdstage" >/dev/null
#!/bin/sh
apk update
apk upgrade
apk add ${core_packages_option} ${core_packages} || exit 1
apk add ${base_packages_option} ${base_packages} || exit 1
apk del --purge ${purge_packages_option} ${purge_packages} || exit 1

echo "${rootcredentials}" | chpasswd
EOF

	chroot-script -d thirdstage || { zerr; return 1; }
}

bootstrap_stage4()
{
	fn bootstrap_stage4
	req=(strapdir extra_packages)
	ckreq || return 1

	sudo mkdir -p "$strapdir"/{boot,dev,proc,sys}

	cat <<EOF | sudo tee "$strapdir/fourthstage" >/dev/null
#!/bin/sh
apk update
apk upgrade
apk add ${extra_packages_option} ${extra_packages} || exit 1

boot_init="modules hwclock swap loadkmap sysctl urandom rngd
bootmisc hostname networking"
default_init="sshd crond ntpd local"
sys_init="dmesg devfs mdev hwdrivers"
shutdown_init="savecache killprocs mount-ro"

for i in \$boot_init; do
	rc-update add \$i boot || true
done

for i in \$default_init; do
	rc-update add \$i default || true
done

for i in \$sys_init; do
	rc-update add \$i sysinit || true
done

for i in \$shutdown_init; do
	rc-update add \$i shutdown || true
done
EOF

	chroot-script -d fourthstage || { zerr; return 1; }

	for i in $inittab; do
		grep -q "$^i" "$strapdir/etc/inittab" && continue
		echo "$i" | sudo tee -a "$strapdir/etc/inittab" >/dev/null
	done || true

	for i in $custmodules; do
		grep -q "^$i" "$strapdir/etc/modules" >/dev/null
		echo "$i" | sudo tee -a "$strapdir/etc/modules" >/dev/null
	done || true
}

qemu_install_user()
{
	fn qemu_install_user "$*"
	req=(arch _target)
	local _target="$1"
	ckreq || return 1

	case "$(uname -m)" in
	arm*|aarch*)
		return
		;;
	esac

	notice "Installing qemu-user-static"

	if [[ -f "/etc/gentoo-release" ]] && [[ "$arch" ~= "arm.." ]]; then
		cat <<EOF | gcc -O3 -static -o /tmp/qemu-wrapper -x -c -
#include <string.h>
#include <unistd.h>
int main(int argc, char **argv, char **envp) {
	char *newargv[argc+3];
	newargv[0] = argv[0];
	newargv[1] = "-cpu";
	newargv[2] = "cortex-a8";
	memcpy(&newargv[3], &argv[1], sizeof(*argv) * (argc-1));
	newargv[argc+2] = NULL;
	return execve("${armhf_qemu_bin}", newargv, envp);
}
EOF
		sudo mv /tmp/qemu-wrapper "$_target" || { zerr; return 1; }
	fi

	case "$arch" in
	aarch64|arm64)
		sudo cp -a "$arm64_qemu_bin" "$_target/usr/bin" || { zerr; return 1; }
		;;
	arm*)
		sudo cp -a "$armhf_qemu_bin" "$_target/usr/bin" || { zerr; return 1; }
		;;
	esac
}

bootstrap_cpio_pack()
{
	fn bootstrap_cpio_pack "$*"
	req=(_bootstrap_cpio strapdir)
	local _bootstrap_cpio="$1"
	ckreq || return 1

	local _dest="$(dirname "$_bootstrap_cpio")"
	if [[ -f "$_bootstrap_cpio" ]]; then
		notice "cpio archive already found in $_dest"
		return
	fi

	notice "Creating bootstrap cpio archive: $_bootstrap_cpio"
	silly

	pushd "$strapdir"
	mkdir -p "$_dest"
	sudo find . \
		-not -path "./dev/*" \
		-a -not -path "./proc/*" \
		-a -not -path "/sys/*" \
		| sudo cpio -oa --reproducible --format=newc \
		| gzip - > "$_bootstrap_cpio" || { zerr; return 1; }
	popd
}

bootstrap_cpio_unpack()
{
	fn bootstrap_cpio_unpack "$*"
	req=(_bootstrap_cpio strapdir)
	local _bootstrap_cpio="$1"
	ckreq || return 1

	notice "Unpacking bootstrap cpio archive: $_bootstrap_cpio"
	silly

	sudo rm -rf "${strapdir}"/*

	pushd "$strapdir" || { zerr; return 1; }
	zcat "$_bootstrap_cpio" | sudo cpio -idmn --format=newc || { zerr; return 1; }
	popd

	sudo mkdir -p "$strapdir"/{boot,dev,proc,sys}
}

blend_bootstrap_setup()
{
	fn blend_bootstrap_setup "(noop)"
	return
}
